name: Update Live Weather

on:
  schedule:
    - cron: '0 */3 * * *' # Every 3 hours
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes'
        required: false
        default: 'false'

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  get_weather:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate random coordinates
        id: generate_coordinates
        run: |
          latitude=$(python -c "import random; print(random.uniform(-90, 90))")
          longitude=$(python -c "import random; print(random.uniform(-180, 180))")
          echo "LATITUDE=$latitude" >> $GITHUB_ENV
          echo "LONGITUDE=$longitude" >> $GITHUB_ENV
          echo "Generated Latitude: $latitude, Longitude: $longitude"

      - name: Get weather data
        id: weather
        run: |
          API_KEY=${{ secrets.WEATHER_API_KEY }}
          response=$(curl -s "http://api.weatherapi.com/v1/current.json?key=$API_KEY&q=${{ env.LATITUDE }},${{ env.LONGITUDE }}")
          echo "API Response: $response"  # Debugging: Print the API response
          temp=$(echo "$response" | jq -r '.current.temp_c')
          condition=$(echo "$response" | jq -r '.current.condition.text')

          echo "Temperature: $temp¬∞C"  # Debugging: Print the temperature
          echo "Condition: $condition"  # Debugging: Print the condition

          echo "TEMP=$temp¬∞C" >> $GITHUB_ENV
          echo "CONDITION=$condition" >> $GITHUB_ENV

      - name: Print README.md before update
        run: cat README.md

      - name: Update README.md
        run: |
          # Create new content
          new_content="### ‚òÄÔ∏è Current Weather:\n\nüå°Ô∏è Temperature: ${{ env.TEMP }}\nüíß Condition: ${{ env.CONDITION }}"

          # Use awk to replace the weather section
          awk -v new="$new_content" '
            BEGIN { update = 0; }
            /### ‚òÄÔ∏è Current Weather:/ { update = 1; print new; next; }
            update == 1 { if (/üíß Condition:/) update = 0; next; }
            { print; }
          ' README.md > temp.md && mv temp.md README.md

          echo "Weather content updated"

      - name: Print README.md after update
        run: cat README.md

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --exit-code; then
            echo "No changes to commit"
            echo "changes=false" >> $GITHUB_ENV
          else
            echo "changes=true" >> $GITHUB_ENV
          fi

      - name: Commit and push changes
        if: env.changes == 'true'
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add README.md
          git commit -m "üå§Ô∏è Updated current weather"
          git push
